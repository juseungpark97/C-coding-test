#include <bits/stdc++.h>
using namespace std;

const int INF = 1000000;
int ret;
int r, c;
char arr[1000][1000];
int fire_check[1000][1000], jihoon[1000][1000];

int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};

queue<pair<int, int>> q;
pair<int, int> p;

int main()
{
    fill(&fire_check[0][0], &fire_check[0][0] + 1000 * 1000, INF);
    cin >> r >> c;
    for(int i = 0; i < r; i++){

        for(int j = 0; j < c; j++){
            cin >> arr[i][j];
            if(arr[i][j] == 'F')
            {
                fire_check[i][j] = 1;
                q.push({i, j});
            } else if(arr[i][j] == 'J')
            {
                p = {i, j};
                jihoon[i][j] = 1;
            }
        }
    }

    while(q.size())
    {
        int x, y;
        tie(y, x) = q.front();
        q.pop();
        for(int i = 0; i < 4; i++)
        {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if(ny < 0 || ny >= r || nx < 0 || nx >= c) continue;
            if(fire_check[ny][nx] != INF || arr[ny][nx] == '#') continue;
            fire_check[ny][nx] = fire_check[y][x] + 1;
            q.push({ny, nx});

        }
    }

    q.push({p.first, p.second});

    while(q.size())
    {
        int x, y;
        tie(y, x) = q.front();
        q.pop();
        if(x == c - 1 || y == r - 1 || x == 0 || y == 0){
            ret = jihoon[y][x];
            break;
        }
        for(int i = 0; i < 4; i++)
        {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if(ny < 0 || ny >= r || nx < 0 || nx >= c)continue;
            if(jihoon[ny][nx])continue;
            if(jihoon[y][x] + 1 >= fire_check[ny][nx] || arr[ny][nx] == '#') continue;
            jihoon[ny][nx] = jihoon[y][x] + 1;
            q.push({ny, nx});
        }
    }

    if(ret != 0) cout << ret << '\n';
    else cout << "IMPOSSIBLE " << '\n';
    
    
}