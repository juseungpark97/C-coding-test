#include <bits/stdc++.h>
using namespace std;

int t, m, n, k, x, y, f, s;

int board[3000][3000];
int visited[3000][3000];

int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};

void BFS(int y, int x)
{
    queue<pair<int, int>> q;
    visited[y][x] = 1;
    q.push({y, x});
    while(q.size())
    {
        tie(f, s) = q.front();q.pop();
        for(int i = 0; i < 4; i++)
        {
        int ny = f + dy[i];
        int nx = s + dx[i];

        if(ny < 0 || ny >= n || nx < 0 || nx >= m) continue;
        if(!board[ny][nx]) continue;
        if(visited[ny][nx]) continue;
        visited[ny][nx] = 1;
        q.push({ny, nx});
        }


    }
 
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> t;
    while(t--)
    {
        cin >> m >> n >> k;
        for(int i = 0; i < n; i++)fill(board[i] , board[i] + 3000, 0);
        for(int i = 0; i < n; i++)fill(visited[i], visited[i] + 3000, 0);
        int cnt = 0;

        while(k--)
        {
            cin >> x >> y;
            board[y][x] = 1;
        }

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(board[i][j] && !visited[i][j])
                {
                    cnt++;
                    BFS(i, j);
                }
            }
        }
        
        cout << cnt << '\n';

    }
}