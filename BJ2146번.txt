#include <bits/stdc++.h>
using namespace std;

#define X first 
#define Y second 

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

int board[100][100];
int vis[100][100];
int dist[100][100];

int n, cnt;

queue<pair<int, int>> q;

int main(void){
    cin >> n;

    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            cin >> board[i][j];
    
    for(int i = 0; i < n; i++) fill(dist[i], dist[i] + n, -1);

    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            if(board[i][j] == 0 || vis[i][j]) continue;
            cnt++;
            board[i][j] = cnt;
            vis[i][j] = 1;
            q.push({i,j});

            while(!q.empty()){
                auto cur = q.front(); q.pop();

                for(int dir = 0; dir < 4; dir++){
                    int nx = cur.X + dx[dir];
                    int ny = cur.Y + dy[dir];

                    if(nx < 0 || nx >= n || ny < 0 || ny >= n)continue;
                    if(board[nx][ny] == 0 || vis[nx][ny]) continue;
                    vis[nx][ny] = 1;
                    board[nx][ny] = cnt;
                    q.push({nx,ny});
                }
            }
            
        }
    }

    int ans = 999999;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            if(board[i][j] != 0){
                dist[i][j] = 0;
                q.push({i,j});
                bool escape = false;
                while(!q.empty() && !escape){
                    auto cur = q.front();q.pop();

                    for(int dir = 0; dir < 4; dir++){
                        int nx = cur.X + dx[dir];
                        int ny = cur.Y + dy[dir];

                        if(nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
                        if(board[i][j] == board[nx][ny] || dist[nx][ny] >= 0) continue;
                        if(board[i][j] != board[nx][ny] && board[nx][ny] != 0){
                            ans = min(ans, dist[cur.X][cur.Y]);
                            escape = true;
                            while(!q.empty()) q.pop();
                            break;
                        }
                        dist[nx][ny] = dist[cur.X][cur.Y] + 1;
                        q.push({nx,ny});

                    }

                    
                }
                for(int i = 0; i < n; i++) fill(dist[i], dist[i] + n, -1);
            }
        }
    }
    cout << ans;
}