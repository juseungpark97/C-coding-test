#include <bits/stdc++.h>
using namespace std;

int n, f, s, max_cnt, max_travel, check;

int board[103][103];
int visited[103][103];

int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};



void BFS(int y, int x)
{
    queue<pair<int ,int>> q;
    visited[y][x] = 1;
    q.push({y, x});

    while(q.size())
    {
        tie(f, s) = q.front();q.pop();
        for(int i = 0; i < 4; i++)
        {
            int ny = f + dy[i];
            int nx = s + dx[i];
            if(ny < 0 || ny >= n || nx < 0 || nx >= n) continue;
            if(board[ny][nx] <= check) continue;
            if(visited[ny][nx]) continue;
            visited[ny][nx] = 1;
            q.push({ny, nx});
        }

    }
}

int main()
{
    cin >> n;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cin >> board[i][j];
            max_travel = max(board[i][j], max_travel);
        }
    }
    while(true)
    {
        if(check == max_travel)break;
        for(int i = 0; i < n; i++) fill(visited[i], visited[i] + 103, 0);
        int cnt = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] > check && !visited[i][j]){
                    cnt++;
                    BFS(i, j);
                }
            }
        }
        max_cnt = max(max_cnt, cnt);
        check++;
    }
    cout << max_cnt;


}

/*
DFS 풀이 추가
#include <bits/stdc++.h>
using namespace std;

int n, f, s, max_cnt, max_travel, check;

int board[103][103];
int visited[103][103];

int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};



void DFS(int y, int x)
{
    visited[y][x] = 1;
    for(int i = 0; i < 4; i++)
        {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if(ny < 0 || ny >= n || nx < 0 || nx >= n) continue;
            if(board[ny][nx] <= check) continue;
            if(visited[ny][nx]) continue;
            DFS(ny, nx);

        }
        return;

}


int main()
{
    cin >> n;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cin >> board[i][j];
            max_travel = max(board[i][j], max_travel);
        }
    }
    while(true)
    {
        if(check == max_travel)break;
        for(int i = 0; i < n; i++) fill(visited[i], visited[i] + 103, 0);
        int cnt = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] > check && !visited[i][j]){
                    cnt++;
                    DFS(i, j);
                }
            }
        }
        max_cnt = max(max_cnt, cnt);
        check++;
    }
    cout << max_cnt;


}
*/