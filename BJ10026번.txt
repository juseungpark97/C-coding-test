https://www.acmicpc.net/problem/10026

#include <bits/stdc++.h>
using namespace std;

#define X first
#define Y second

string board[105];

bool vis[105][105];

int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

int colorSize = 0, N;

queue<pair<int, int>> Q;




void BFS(int i, int j, char color){
    Q.push({i, j});
    while(!Q.empty()){
        auto cur = Q.front(); Q.pop();

        for(int dir = 0; dir < 4; dir++){
            int nx = cur.X + dx[dir];
            int ny = cur.Y + dy[dir];

            if(nx < 0 || nx >= N || ny < 0 || ny >= colorSize) continue;
            if(board[nx][ny] != color || vis[nx][ny]) continue;
            vis[nx][ny] = true;
            Q.push({nx,ny});
        }

    }
}

void BFS2(int i, int j, char color){
    Q.push({i, j});
    while(!Q.empty()){
        auto cur = Q.front(); Q.pop();

        for(int dir = 0; dir < 4; dir++){
            int nx = cur.X + dx[dir];
            int ny = cur.Y + dy[dir];

            if(nx < 0 || nx >= N || ny < 0 || ny >= colorSize) continue;
            if(board[nx][ny] != color || vis[nx][ny]) continue;
            vis[nx][ny] = true;
            Q.push({nx,ny});
        }

    }
}

int main(){
    
    cin >> N;

    int R = 0, G = 0, B = 0;

    for(int i = 0; i < N; i++) cin >> board[i];

    colorSize = board[0].size();

    for(int i = 0; i < N; i++)
        for(int j = 0; j < board[i].size(); j++){
            if(board[i][j] == 'R' && vis[i][j] == false){
                BFS(i, j, 'R');
                R++;
            }
            else if(board[i][j] == 'G' && vis[i][j] == false){
                BFS(i, j, 'G');
                G++;
            }
            else if(board[i][j] == 'B' && vis[i][j] == false)  {
                BFS(i, j, 'B');
                B++;
            }
        }

    int result = 0;
    result = R+G+B;
    cout << result << ' ';

    int R_2 = 0, B1 = 0;

    for(int i = 0; i < N; i++){
        for(int j = 0; j < colorSize; j++){
            if(board[i][j] == 'G'){
                board[i][j] = 'R';
            }
        }
    }
    for(int i = 0; i < N; i++) fill(vis[i], vis[i]+colorSize, false);
    for(int i = 0; i < N; i++)
        for(int j = 0; j < board[i].size(); j++){
            if(board[i][j] == 'R' && vis[i][j] == false){
                BFS(i, j, 'R');
                R_2++;
            }
            else if(board[i][j] == 'B' && vis[i][j] == false)  {
                BFS(i, j, 'B');
                B1++;
            }
        }
    cout << R_2 + B1;




}
