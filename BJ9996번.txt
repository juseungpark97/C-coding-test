#include <bits/stdc++.h>
using namespace std;
typedef long long ll;


int n;
string pt, fn, fp, sp;

vector<string> split(string input, string delimiter)
{
    vector<string> ret;
    ll pos = 0;
    string token ="";

    while((pos = input.find(delimiter)) != string::npos)
    {
        token = input.substr(0, pos);
        ret.push_back(token);
        input.erase(0, pos + delimiter.length());
    }
    ret.push_back(input);
    return ret;
}

void check(string fn)
{
        for(int i = 0; i < fp.size(); i++)
        {
            if((fn.size() < 2) || fp[i] != fn[i])
            {
                cout << "NE" << '\n';
                return;
            }
        }
        reverse(fn.begin(), fn.end());
        reverse(sp.begin(), sp.end());

        for(int i = 0; i < sp.size(); i++)
        {
            if((fn.size() < 2) || sp[i] != fn[i])
            {
                cout << "NE" << '\n';
                reverse(sp.begin(), sp.end());
                return;
            }
        }
        cout << "DA" << '\n';
        reverse(sp.begin(), sp.end());
        return;
}


int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    cin >> pt;

    vector<string> v = split(pt,"*");

    auto it = v.begin();

    fp = *it;
    it++;
    sp = *it;
    while(n--)
    {
        cin >> fn;
        if(fn.size() < (fp.size() + sp.size())){
            cout << "NE" << '\n';
            continue;
        }
        check(fn);

    }


}

/*
#include <bits/stdc++.h>
using namespace std;
int n, pos;
string pt, fn, firstpt, secondpt;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    cin >> pt;
    pos = pt.find("*");
    firstpt = pt.substr(0, pos);
    secondpt = pt.substr(pos + 1);


    for(int i = 0; i < n; i++)
    {
        cin >> fn;
        if(firstpt.size() + secondpt.size() > fn.size()){
            cout << "NE" << '\n';
        } 
        else if(firstpt == fn.substr(0, firstpt.size()) && secondpt == fn.substr(fn.size()-secondpt.size()))
        {
            cout << "DA" << '\n';

        }
        else cout << "NE" << '\n';
    }
    
    

}
*/