#include <bits/stdc++.h>
using namespace std;

int board[10][10], visited[10][10];

vector<pair<int, int>> virus;
vector<pair<int, int>> wall;

int n, m, ret, mx;

int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};

void DFS(int y, int x)
{
    for(int i = 0; i < 4; i++)
    {
        int ny = y + dy[i];
        int nx = x + dx[i];
        if(ny < 0 || ny >= n || nx < 0 || nx >= m || visited[ny][nx] || board[ny][nx]) continue;
        visited[ny][nx] = 1;
        DFS(ny, nx);
    }
    return;
}


int solve()
{
    fill(&visited[0][0], &visited[0][0] + 10 * 10, 0);
    for(pair<int, int> v : virus)
    {
        visited[v.first][v.second] = 1;
        DFS(v.first, v.second);
    }

    int cnt = 0;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            if(board[i][j] == 0 && visited[i][j] == 0) cnt++;
        }
    }
    return cnt;


}

int main()
{
    cin >> n >> m;

    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            cin >> board[i][j];
            if(board[i][j] == 0)wall.push_back({i, j});
            if(board[i][j] == 2)virus.push_back({i, j});
        }
    }


    for(int i = 0; i < wall.size(); i++)
    {
        for(int j = 0; j < i; j++)
        {
            for(int k = 0; k < j; k++)
            {
                board[wall[i].first][wall[i].second] = 1;
                board[wall[j].first][wall[j].second] = 1;
                board[wall[k].first][wall[k].second] = 1;
                ret = max(ret, solve());
                board[wall[i].first][wall[i].second] = 0;
                board[wall[j].first][wall[j].second] = 0;
                board[wall[k].first][wall[k].second] = 0;
            }
        }
    }
    cout << ret << '\n';
}