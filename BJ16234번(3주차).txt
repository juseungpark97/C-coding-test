#include <bits/stdc++.h>
using namespace std;
int arr[100][100], visited[100][100];
int n, l, r, ret, result, g, cnt;
double db;
vector<pair<int, int>> v;

int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};

void dfs(int y, int x, vector<pair<int, int>> &v)
{ 
    for(int i = 0; i < 4; i++)
    {
        int ny = y + dy[i];
        int nx = x + dx[i];
        if(ny < 0 || ny >= n || nx < 0 || nx >= n || visited[ny][nx])continue;
        if(abs(arr[ny][nx] - arr[y][x]) >= l && abs(arr[ny][nx] - arr[y][x]) <= r)
        {
            visited[ny][nx] = 1;
            v.push_back({ny,nx});
            ret += arr[ny][nx];
            dfs(ny, nx, v);
        } 
    }
    return;
}

int main()
{
    cin >> n >> l >> r;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            cin >> arr[i][j];
        }
    }
    while(true)
    {
        memset(visited, 0, sizeof(visited));
        bool flag = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(!visited[i][j])
                {
                    v.clear();
                    ret = arr[i][j];
                    v.push_back({i, j});
                    visited[i][j] = 1;
                    dfs(i, j, v);
                    if(v.size() == 1) continue;
                    for(pair<int, int> b : v)
                    {
                        arr[b.first][b.second] = ret / v.size();
                        flag = 1;
                    }
                }
                }
            }
            if(!flag) break;
            cnt++;
        
    }
     
     cout << cnt;
}

   





