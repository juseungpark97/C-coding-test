#include <bits/stdc++.h>
using namespace std;

int n, m;
string s;
char arr[55][55];
int visited[55][55], ret = -1;
vector<pair<int, int>> shore;

int dy[4] = {-1, 0, 1, 0};
int dx[4] = {0, 1, 0, -1};

void bfs(int y, int x)
{
    queue<pair<int, int>> q;
    q.push({y, x});

    while(q.size())
    {
        int f, s;
        tie(f, s) = q.front(); q.pop();
        for(int i = 0; i < 4; i++)
        {
            int ny = f + dy[i];
            int nx = s + dx[i];
            if(ny < 0 || ny >= n || nx < 0|| nx >= m) continue;
            if(visited[ny][nx] >= 0) continue;
            if(arr[ny][nx] == 'W') continue;
            visited[ny][nx] = visited[f][s] + 1;
            ret = max(ret, visited[ny][nx]);
            q.push({ny, nx});
        }

    
    }
    
}


int main()
{
    cin >> n >> m;
    for(int i = 0; i < n; i++)
    {
        cin >> s;
        for(int j = 0; j < s.size(); j++)
        {
            arr[i][j] = s[j];
            if(arr[i][j] == 'L') shore.push_back({i, j});
        }
    }


    for(pair<int, int> sho : shore)
    {
        memset(visited, -1, sizeof(visited));
        visited[sho.first][sho.second] = 0;
        bfs(sho.first, sho.second);
    }

    cout << ret << '\n';

}